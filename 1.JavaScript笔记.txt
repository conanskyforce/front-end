JavaScript数据类型

字符串(转义字符反斜杠 \,es6增加多行字符串``,${var},)
数字(整数，浮点数，科学计数法，负数，NaN，Infinidy，0x554)
布尔(&&,||,!,>,<,==,===,!=,!==,)的结果
null(空)
undefined(申明了，但是未定义)
对象(数组，函数，对象(每个键都是字符串,in 判断属性在不在某个变量(或其原型,判断是否自身才有obj.hasOwnProperty(prop))))

x=0;
switch(x){
    case 1:alert('Monday!');
       break;
    case 2:alert('Tuesday!');
    default:alert('Noday!')
}

For/In 循环
var obj= {stu1:"conan",stu2:"steve",stu3:"kite"}

for(var x in obj){

console.log(x)
}

stu1
stu2
stu3

！！实际循环的是下标

JavaScript错误处理
try{
var asd = s;
throw "err defined by me."
}
catch(err){
alert(err)
}

JavaScript对象的属性必须是字符串,针对这种情况，es6新推出了Map,Set结构.
Map 键值对结构,具有极快的查找速度
var myMap = new Map();
var name = ['jack','pony','mason']
var age = [48,42,49];
myMap.set(name[0],age[0]);
myMap.set(name[1],age[1]);
myMap.set(name[2],age[2]);

myMap.has('jack') ;//true
myMap.get('jack') ;//48

Set 与 Map 类似，但是Set不能储存value，不能储存重复的key

var mySet = new Set();
mySet.add(1);
mySet.add('1');
mySet.add(1);
mySet.add(2);
mySet.add('ok');
mySet;

Array,Map,Set 都属于 `iterable` 类型
for of 

forEach(fucntion([element,value,value],[index,key,value],[arr,Map,Set]){
	//...
})

函数内部关键字
arguments(类数组,保存传入函数的所有参数)

es6  rest 参数(数组)
function myFunc(a,b,...rest)

变量提升
在函数内部，将所有申明的变量，提升到函数头部，
所以一定要在函数的头部，申明所有的变量

let 申明变量 只在作用域生效
比如：for，不会变量提升(const　也一样)
function a(){
var a='1';
console.log(a+b);
let b = '2';//ReferenceError: b is not defined

}
a();//

const 定义一个不变的量，必须赋予初始值

'use strict';//模式修复一些小错误，变量必须var申明，函数内部的this指向undefined。
*第二层函数内部，要先捕获外层this,外层var that = this;*

apply(第一个参数是要绑定this的对象，第二个是传入函数的参数(数组))
call(第一个参数是要绑定this的对象，第二个是传入函数的参数(依次传入))

func.apply(obj,[params...])

map, reduce

[1,2,3,4,5].map(String);//["1", "2", "3", "4", "5"]
[1,2,3,4,5].map(function(x){return (x).toString()});//["1", "2", "3", "4", "5"]
[1,2,3,4,5].map(function(x){
	return x.toString();
})
[1,2,4,5,4,5,8,9].filter(function(e,i,a){return a.indexOf(e)===i})

["1", "2", "3", "4", "5"].reduce(function(x,y){return x+y});//"12345";

创建一个匿名函数并立即执行的办法,直接写语法解析会报错
(function(x){
	return x*x;
}(5));

(function(x){
	return Math.pow(x,2)
})(9);

箭头函数(相当于匿名函数,简单，并且修复了this指向问题(词法作用域，指向外层调用者))
x => x*x;
等价于
function(x){
	return x*x;
}

generator 

function* foo(x){
	yield x*x;
	yield x*x*x;
	return x**x;
}
var r = foo(3);
r;
r.next();
r.next();
r.next();

for(let a of r){
	console.log(a)
}
//循环yield的结果

generator可以在执行中多次返回，看上去就像一个可以记住执行状态的函数，generator的大用处在针对异步代码

parseInt() parseFloat() 转换到number类型
String() 或者自带的toString() 转换到string类型
typeof 可判断出number string boolean function undefined,判断不了null,数组和一般对象
Array用Array.isArray(arr) 判断
null 用 ele===null 判断
判断是否是全局对象 typeof window.someEle==='undefined'
判断某个变量是否存在用 typeof ele ==='undefined';

Object.create(ob);//创建一个基于ob原型的新对象 
var a = [];
a.__proto__ === Array.prototype;//true
原型链
a-->Array.prototype-->Object.prototyp-->null

alert.__proto__===Object.getPrototypeOf(alert);//true
Object.getPrototypeOf(alert)===Function.prototype;//true

function Structfunc(){
	this.x = 1;
	this.y = 2;
}

var x = new Structfunc();
x.x;//1
x.y;//2
原型链
x-->Structfunc.prototype-->Object.prototype-->null;
x同时获得一个constructor属性
x.constructor === Structfunc.prototype.constructor;//true
x.constructor === Structfunc;//true
x instanceof Structfunc;
x instanceof Object;

继承
function inherits(Child,Parent){
	var F = function(){};
	F.prototype = Parent.prototype;
	Child.prototype = new F();
	Child.prototype.constructor = Child;
}

es6 class
class Student{
	constructor(name){
	this.name = name;
	}
	otherfunc(){
	console.log(this.name)
	}
}
var x = new Student('666');
x.otherfunc();//666

class ExtendsStudent extends Student{
	constructor(name,grade){
	super(name);
	this.grade = grade;
	}
	myGrade(){
		return function(){console.log(this.grade)};
	}
}
var extStu = new ExtendsStudent('conan',99);
extStu.myGrade();//99



onsubmit ="return false"

onchange (元素被改变，然后失去焦点的时候触发)

<form action="xxx.xx" method="POST" onsubmit="return false">
<input type="text" name="text1">

<input type="submit" value="submit">
</form>



typeof new Boolean('asd')//构造函数 objet
typeof Boolean('asd')//转换函数 boolean

0，-0，null，''，false，undefined,NaN ————对象为false


Date()返回一个字符串
new Date()返回一个Date对象,值与Date()返回值一样

function getLocalTime(){
var d = new Date(),
    year = d.getFullYear(),
    month = d.getMonth(),
    date = d.getDate(),
    day = d.getDay(),
    hour = d.getHours(),
    min = d.getMinutes(),
    sec = d.getSeconds(),
    localTime = year+"年"+(month-0+1)+"月"+date+"日 " +hour+":"+min+":"+sec
console.log(localTime)
}
getLocalTime()

//获取UTC时间
function getUTCTime(){
var d = new Date(),
    year = d.getFullYear(),
    month = d.getMonth(),
    date = d.getUTCDate(),
    day = d.getUTCDay(),
    hour = d.getUTCHours(),
    min = d.getUTCMinutes(),
    sec = d.getUTCSeconds(),
    localTime = year+"年"+(month-0+1)+"月"+date+"日 " +hour+":"+min+":"+sec
console.log(localTime)
}
getUTCTime()


Math.random() ———>[0,1)

[97，130]

Math.floor(Math.random()*34)+97


随机获取[min,max]范围内的整数
Math.floor(Math.random()*(max-min+1)+mimn);


String
var s = "qwertyuiop";

s.charAt(0)//q
s.charCodeAt(0)//113
String.fromCharCode(113)//q

match全局匹配返回的是匹配到的子串
match非全局匹配，匹配到的是数组，第一个元素时匹配到的子串，index是文字，input是匹配元素

正则表达式

RegExp自己的方法

test()//返回true或false
exec()//返回匹配到的信息，匹配不到返回null

字符串的方法
search()//返回出现位置
match()//返回数组，已说明过
replace()
split()


encodeURI处理整个URI
encodeURIComponent处理query那部分字符串

decodeURIComponent能解码所有哦！

浏览器窗口的宽高(去除菜单栏，工具栏，边框的宽高)
window.innerHeight
window.innerWidth

document.documentElement.clientHeight
document.documentElement.clientWidth

服务端设置cookie，使用httpOnly，使得cookie只能通过浏览器获得

innerText不返回隐藏的原物文本
textContent返回所有文本
cssText css样式文本

提交表单
form 元素有一个submit方法
form本身的onsubmit事件
name属性会被提交给后台

<form action="#" enctype="multipart/form-data">
<input type="file" name="fileUpload"	/>

</form>

var file = document.getElementsByName('fileUpload')[0];

file.files[0].name;//名字
file.files[0].size;//大小字节
file.files[0].type;//类型

var reader = new FileReader();//读取文件接口
reader.onload = function(e){
	var data = e.target.result;
	preview.style.backgroundImage = 'url('+data+')';
}
reader.readAsDataURL(file);

AJAX

var request = new XMLHttpRequest();
request.onreadystatechange = function (){
	if(request.readyState == 4){
		if(request.status === 200){
			return success(request.responseText);
		}else{
			return fail(request.status);
		}
	}
}
request.open('GET','apiUrl');
request.send();

var req = new XMLHttpRequest()||new ActiveXObject('Microsoft.XMLHTTP');
req.onreadystatechange = function (e) {
	if(req.readyState ===4 &&req.status ===200){
		console.log(e);
		console.log(req);
		console.log("req.responseText: "+req.responseText);
	}
}
req.open('GET','https://httpbin.org/ip',true);//默认用异步
req.send();

跨域
JSONP
函数调用的形式返回，预先在页面中准备好回调函数
数据回来就相当于直接执行回调函数

CORS
Access-Control-Allow-Origin 包含本域就能够给跨域请求成功

Promise

new Promise(func)
.then(function(res){
	//do sth if success;
})
.catch(function(res){
	//do sth if failed;
})

jQuery
$(':contains(不错)')
$('someSelector').css('xxx',{'xx':'xx','xx':'xx'})
$('someSelector').addClass('xxx');
$('someSelector').hasClass('xxx');
$('someSelector').removeClass('xxx');
$('someSelector').show(time);
$('someSelector').hide(time);
$('someSelector').attr('id,name,data...')
$('someSelector').removeAttr('id,name,data...')
$('someSelector').is(':chcked');
$('someSelector').is(':selected');
$('someSelector').prop('chcked');
$('someSelector').val();
$('someSelector').append();
$('someSelector').prepend();
$('someSelector').before();
$('someSelector').after();
$('someSelector').remove();

change --> input, select, textarea 内容改变时触发
submit --> form 提交时触发

$(document).read(function(){
	//...
})
$(function(){
	//...
})

$('someSel').off();//移除所有事件
.trigger() ;//触发事件
.serialize();//序列化表单

async 和 defer
普通：加载并执行完毕再执行之后代码
async(异步)：加载执行的同时还加载之后文档，一定在load事件之前执行，但可能在DOMContentLoaded事件之前或之后
defer：脚本的执行要等到文档加载完成之后，在DOMContentLoaded触发之前完成

var a;
//var b 并没有申明

typeof a ;//undefined
typeof b ;//undefined

undefined派生自null

null == undefined;//true

var log = window.console.log;
var count = 0;
window.console.log = function(){
	console.log(count++);
	return log.apply(null,arguments);
}
console.log(1)

几乎所有值都有toString方法(null,undefined没有)


120..toString(8);//170
parseInt(170,8);//120

位操作符
1.按位非(~)(操作数的负值-1)

var num1 = 25;
var num2 = ~num1;//-26(反码[负值]+1===-25)

2.按位与
var res = 25&3;//1

3.按位或
var res = 25|3;//27

4.按位亦或
var res = 25^3;//26

5.左移(所有位左移,右边补0)
var num1 = 2;
var num2 = num1<<5;//64

6.右移(所有位右移,左边补0)
var num1 = 64;
var num2 = num1>>5;//2


function rest(...arr){
	console.log(arr);//[1,2,3,4]
	console.log(arguments);//[1, 2, 3, 4, callee: (...), Symbol(Symbol.iterator): ƒ]
}
rest(1,2,3,4)

P87 第四章 变量、作用域与内存

基本类型（按值访问）：undefined，null，boolean，string，number
引用类型（保存在内存中的对象）：对象
对象的一般复制只复制的指针，指向相同的对象

作用域链（作用域嵌套，局部变量只能作用域访问，下层能访问上层变量）

BOM和DOM对象采用计数垃圾回收机制，

不使用的时候，手工断开其余原生JavaScript对象的联系
myObject.element = null;
element.someObject = null;

复制为null表示解除引用;

数组
[] instanceof Array;
Array.isArray();

push() 插入任意项，返回总数组的长度
pop() 删除最后一项，返回这个值

push() ++ pop() 栈(后进先出)

push() ++ shift() 队列(先进先出)

reverse() 反转
sort() 调用toString()方法，转换为字符串再比较
两者返回的都是排序后的数组

[1,2,5].concat(1,5,7,[1,57,[2]]);//
[1, 2, 5, 1, 5, 7, 1, 57, Array(1)]

如果a,b中有负数,等价于数组长度+该数
slice(a,b)

splice(startPos,howMuch,addArr)

indexOf();//从开头找
lastIndexOf();//从末尾找

迭代方法
every()
some()
filter()
forEach()
map()
reduce()

Date.parse('12/3/2017');//返回某一日期距1970年的毫秒数
new Date('12/3/2017')
Date.UTC(2017,12,12,23,59,59);

Date.now();//当前时间毫秒数
+new Date();

RegExp
元字符必须转义(在正则表达式中有用途)
( [ { \ ^ $ | ) ? * + . ] }

正则表达式的方法：
exec();//匹配到了返回数组,没匹配到返回null
test();//匹配到了返回true,反之返回false


/[ab]((c)i)$/.exec('aci');
["aci", "ci", "c", index: 0, input: "aci"]
RegExp.$1;第1个捕获组
RegExp.$2;第2个捕获组
RegExp.$3;第3个捕获组
RegExp.$4;第4个捕获组
...

函数申明会被提升，表达式不会
alert(sum(1,2))
function sum(a,b){
	return a+b;
}
//没问题

alert(sum(3,4))
var sum = function(x,y){
	return x+y;
}
//报错

比较对象数组的属性，进行排序
function compareProperty(prop){
	return function(obj1,obj2){
		var value1 = obj1[prop];
		var value2 = obj2[prop];
		if(value1 <value2){
			return -1;
		}else if(value1>value2){
			return 1;
		}else{
			return 0;
		}
	}
}
var data = [{name:'adsd',age:56},{name:'lkuj',age:26},{name:'kuhy',age:86}];

data.sort(compareProperty('age'));


arguments.callee指代当前函数
arguments.callee.caller指向调用它的函数
严格模式下两者都不能用(禁止窥探函数内部)

每个函数都有length，prototype属性
length表示期望得到的参数个数
prototype则是实例的原型对象，各种方法都保存在这个原型之下
不可枚举，for-in无法发现
每个函数都包含apply,call方法
牛逼在于能够扩充函数运行的作用域

bind();//创建一个函数的实例，this值被绑定到传给bind函数的值

var color = 'red';
var o = {color:'blue'};
function showColor(){
	console.log(this.color);
}
showColor();//red
showColor.call(o);//blue
showColor.apply(o);//blue

var newShowColor = showColor.bind(o);
newShowColor();//blue

P137 基本包装类型

String
.slice(start,end);//负数+长度
.substring(start,end);//负数变0
.substr(start,howMany);//第一个辅助+长度，第二个变0

字符串的正则方法
.match()
.search()
.replace()
.split()

可以对整个URI使用encodeURI(),而只能对附加在URI后边的字符串使用encodeURIComponent()

取得global对象

;(function(){
	return this;
}());

返回a-b之间的整数

function selectNumber(smallValue,bigValue){
	var choices = bigValue - smallValue + 1;
	return Math.floor(Math.random() * choices + smallValue)
}
selectNumber(10,85)

面向对象(OOP)

var person = {};
Object.defineProperty(person,'name',{
	configurable:false,//不可配置，不可删除,变了true之后，只能修稿writable的值
	writable:false,//不可重赋值
	enumerable:false,//不可遍历
	value:'conan'//值
})

var person = {
	name:'conan',
	_age:26
}

[[getter]] 和 [[setter]]

Object.defineProperty(person,'age',{
	get:function(){
		return this._age;
	},
	set:function(newV){
		this._age = newV;
		this.name+=newV;
	}
})

Object.defineProperties(person,{
	'age':{
		configurable:false,
		writable:false,
		enumerable:false,
		value:'26'
	},
	'name':{
		configurable:true,
		writable:false,
		enumerable:true,
		value:"conan"
	}
})


Object.getOwnPropertyDescriptor(person,'name');

.isPrototypeOf();
Object.getPrototypeOf();

in 也返回在原型中的属性
hasOwnProperty() 只返回该对象中的属性
!hasOwnProperty(prop)&&(prop in obj) 只存在于原型中

for in 也返回原型中[可枚举]的属性
Object.keys(obj);//返回对象中所有可枚举的属性

Object.getOwnPropertyNames(obj);//返回自身属性(不管可枚举还是不可枚举)

function Person(){
	
}
//切记重写原型对象不要在创建实例之后
Person.prototype = {
	name:'x',
	age:22,
	doSth:function(){
		this.age++;
	},
	sing:function(){
		console.log(this.name)
	}
}

Object.defineProperty(Person.prototype,'constructor',{
	enumerable:false,
	value:Person
})
var a = new Person();
var b = new Person();

String.prototype.startsWith = function(txt){
	return this.indexOf(txt) ===0;
}

组合使用构造函数模式和原型模式
构造函数模式定义实例属性，原型模式定义方法和共享的属性。

function Person(name,age,job){
	this.name = name;
	this.age = age;
	this.job = job;
}

Person.prototype = {
	constructor:Person,
	sayJob:function(){
		alert(this.job)
	}
}
var p1 = new Person('conan',24,'CEO')
var p2 = new Person('steve',34,'COO')
p1.name;
p2.name;
p1.sayJob;
p2.sayJob;


var factorial  = (function f(x){
	if(x <= 1){
		return 1;
	}else{
		return x*f(x-1)
	}

});

factorial(10)

//后台的每个自信环境都有一个表示变量的对象——变量对象。全局环境的变量对象始终存在，而像compare()函数这样的局部环境的变量对象，则只存在函数自信的过程中存在。在船检compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[scope]]属性中。


//什么是闭包.
内部函数可以访问外部函数的变量和参数，即使是在外部函数被终结了之后。

//闭包只能取得包含函数中任何变量的最后一个值。

//模仿块级作用域,(只有函数作用域和全局作用域)
(function(){
	//...
})();


BOM
clientWidth;//padding+content
offsetWidth;//border+padding+content
scrollWidth;//全部宽度


DOM

节点类型
1 元素节点
2 属性节点
3 文本节点
9 文档节点

nodeType
nodeName是元素的标签名

每个节点都有childNodes属性保存所有子节点对象
x.childNodes[0]<==>x.childNodes.item(0);

var arrayOfNode = Array.prototype.slice.call(someNode.childNodes,0);

parentNode 父节点
firstChild
lastChild
previousSibling
nextSibling
ownerDocument 整个文档的文档节点
someNode.hasChildNodes()
操作节点最常用的方法就是
appendChild()

parentNode.insertBefore(newNode,null);//插入最后
parentNode.insertBefore(newNode,parentNode.firstChild);//插入最前
parentNode.insertBefore(newNode,parentNode.lastChild);//插入最后一个子节点前边

parentNode.replaceChild(xx,xx);
parentNode.removeChild(someNode);

document.documentElement --> html 元素
document.body --> body 元素

ele.id;
ele.name;
ele.title;
ele.cssText;
ele.className;
ele.classList;

特性(一般直接用节点元素的属性，而不是用这些方法，这些方法用于自定义属性)
ele.getAttribute('class');
ele.setAttribute('class','xxx');
ele.removeAttribute('class');

attributes属性(动态属性集合)

document.documentElement.attributes[0].nodeName;
document.documentElement.attributes[1].nodeValue;

//创建元素
document.createElement();//

var script = document.createElement('script');
script.src='xxx.com';
document.head.appendChild(script)

var fragment = document.createDocumentFragment();
//可以先避免反复渲染的问题

var sty = document.createElement('style');
var txtNode = 
`
a[target=_blank]:after{
	content:'→';
	height:20px;
	width:20px;
	display:inline-block;
}

`;
try{
	sty.appendChild(document.createTextNode(txtNode));
}catch(ex){
	sty.style.cssText = textNode;
}

document.head.appendChild(sty);


//document、documentFragment，element都可以使用
querySelector();
querySelectorAll();

firstChild;
等价于
childNodes[0];

firstElementChild;
lastElementChild;
previousElementSibling;
nextElementSibling;

className;//字符串
classList;//对象有方法

div.classList.add('myClass')
div.classList.remove('myClass')
div.classList.toggle('myClass')
div.classList.contains('myClass')

document.activeElement;//获取当前获得焦点的元素

document.readyState;//
'loading' 加载中
'complete' 加载完成了

自定义属性

<div class="xx" data-myData='666' ...>

通过元素dataset属性访问
div.dataset.myData;//'666'

DOM2和DOM3

元素的style属性，样式属性
className
styleFloat
特殊，为JavaScript保留字

style对象属性
cssText;//style的css代码，可读写
length;//css属性的数量

getComputedStyle();//获取计算后(最后得到的)的属性,不能写，只能读
document.defaultView.getComputedStyle(document.body);
window.getComputedStyle(document.body);
IE没有上述方法，但是有个属性：
currentStyle返回一样的对象
document.body.currentStyle;

document.styleSheets;//文档含有的样式表
rules = sheet.cssRules||sheet.rules;
rules.selectorText;//div.box
rules.cssText;//完整的css代码

//插入样式表
document.styleSheet[0].insertRule('body','background-color:silver',0);
FOR IE
document.styleSheet[0].addRule('body','background-color:silver',0);//

//删除规则
document.styleSheet[0].deleteRule(0);
FOR IE
document.styleSheet[0].removeRule(0);

元素偏移(元素的属性)
offsetWidth;//内容宽度+内边距+边框
offsetHeight;//内容高度+内边距+边框

offsetTop;//距离offsetParent的顶端距离
offsetLeft;//距离offsetParent的左端距离

clientWidth;//内容宽度+内边距
clientHeight;//内容高度+内边距

scrollWidth;//内容宽度
scrollHeight;//内容高度

document.documentElement.scrollTop;//内容被遮盖的上部分

确定元素大小(每个元素都有这个方法)
ele.getBoundingClientRect();//

事件

冒泡与捕获流
IE提出冒泡机制， 又对了一次？(上次是盒子模型)

捕获阶段--
处于目标阶段--
冒泡阶段--

HTML事件处理程序
event 事件对象
this 事件的目标元素
作用域被扩展了（到表单，可以直接访问value，username.value...）

DOM0级事件处理（冒泡阶段被处理）
someEle.onclick=function(){//...};
//this指代当前元素

DOM2级事件处理（默认冒泡false，true为捕获
addEventListener('click',function(){//...},false);//true为捕获
removeEventListener(...);//移除事件处理程序（匿名函数没用）
//this指代当前元素

IE事件处理程序(冒泡阶段)
attachEvent和detachEvent
attachEvent("onclick",handler)
detachEvent("onclick",handler)
//this指代window

事件对象
event对象
btn.onclick = function(event){
	console.log(event);
}
btn.addEventListener('click',function(event){
	console.log(event);
})

event.currentTarget === this;//等于函数内部的this，等于绑定事件的那个元素
event.target ;//触发事件的对象
event.preventDefault();//阻止事件默认行为
evetn.stopPropagation();//阻止进一步捕获或冒泡

document.body.onclick = function(e){
	console.log(this);
	console.log(e.target);
	console.log(e.currentTarget);
	console.log(e);
}

IE中的
btn.onclick = function(){
	var event = window.event;
	//...
}
btn.attachEvent('onclick',function(e){
	e;//
})

event对象事件
event.returnValue = false;//等价于preventDefault()
event.cancelBubble = true;//等价于stopPropagation()

this 始终等价于绑定事件的元素
srcElement 等价于触发事件的元素(target)

事件
1.UI事件
a.load（window，框架，img，嵌入元素,最新script也有这个属性了！）
b.unload（同上）
c.erroe(同上)
d.select(用于选择文本框中字符时候触发)
e.resize(窗口或框架变动时候在window触发)
f.scroll(滚动元素上触发)

2.焦点事件
focus;//聚焦
blur;//失焦
focusin;//聚焦，冒泡
focusout;//失焦点，冒泡

3.鼠标与滚轮事件
click
dblclick
mousedown
mouseenter;//不会冒泡
mouseleave;//不会冒泡
mousemove
mouseout
mouseover
mouseup

event事件的属性
event.clientX;//视口左
event.clientY;//视口上
event.pageX;//(包括scrollLeft)
event.pageY;//(包括scrollTop)
event.screenX;//屏幕位置
event.screenY;//

修改键
event.shiftKey
event.ctrlKey
event.altKey
event.metaKey

鼠标键
event.button;//
0 左键
1 中键
2 右键

滚轮事件
mousewheel
event.wheelDelta;//
往前120
往后-120

window.onmousewheel = function(e){
	console.log(e.wheelDelta);
}

键盘事件
keydown
keypress
keyup
按下一个键不放，会重复触发keydown和keypress事件

HTML5事件

1.contextmenu

var div = document.createElement('div');
div.innerHTML = 
`
<p>header</p>
<div>body</div>
<p>footer</p>
`;
div.style.cssText = 
`
visibility:hidden;
position:fixed;
//top:100px;
//left:100px;
`;
document.body.appendChild(div);

document.oncontextmenu = function(e){
	e.preventDefault();
	div.style.visibility='visible';
	div.style.top = e.clientY+10+'px';
	div.style.left = e.clientX+10+'px';
}


beforeunload

window.onbeforeunload = function(event){
    var msg = '你，你确定要离开吗？';
	event.returnValue = msg;
	return msg;
}

DOMContentLoaded事件(DOM加载完成，神器呀)

可以添加到document和window上(会冒泡到这里来的)


//一下三个事件，依次执行
document.addEventListener('readystatechange',function(){
	if(document.readyState=='interactive'){
	console.log('0.interactive!')
	}
})
document.addEventListener('DOMContentLoaded',function(){
	console.log('1.DOMContentLoaded!')
})
document.addEventListener('readystatechange',function(){
	if(document.readyState=='complete'){
	console.log('2.readystatechange!')
	}
})
window.onload = function(){
	console.log('3.window loaded!')
}
setTimeout(function(){
	//onload事件之后的呀
	console.log('4.setTimeout 0s!')
},0)

性能

事件委托
事件维托利用事件冒泡，只用指定一个事件处理程序就你能管理某一类型的所有事件。
['减少代码量'，'提升性能','简介明了']
特别是列表之类的。

移除事件处理程序
btn.onclick = null;

模拟事件
1.鼠标事件
var btn = $('#su')[0];
var event = document.createEvent('MouseEvents');
event.initMouseEvent('click',true,true,document.defaultView,0,0,0,0,0,false,false,false,false,0,null);
btn.dispatchEvent(event);

表单脚本

document.getElementsById('form1');
document.forms['form1'];

input或button的type设置为submit即可提交表单
请求发送服务器之前，触发submit事件
document.forms['form1'].addEventListener('submit',function(e){
	e.preventDefault();
})

input button --->type=reset;//重置表单

表单的elements属性表示表单中所有元素的集合，这个elements是一个有序列表，其中包含表单中所有的字段，例如<input><textarea><button><fieldset>.

可以按照位置和name特性来访问他们。
form.elements[1];
form.elements['textbox1'];返回的也有可能是一个NodeList

表单字段共有的属性：
disabled
form
name
readOnly
tabIndex
type
value

共有的表单字段方法
blur()与focus()
//页面加载完毕后，第一个表单聚焦
window.onload = function(){
	document.forms[0].elements[0].focus()
}

<input type="text" size='25' maxlength='50' value='初始值'>

<textarea rows='30' cols='25' >初始值</textarea>

选择文本
select()方法
$('textarea')[0].onfocus=function(){
	this.select();
}
//屏蔽非数字的输入
document.onkeypress = function(e){
	var charCode = e.keyCode;
	if(!/\d/.test(String.fromCharCode(charCode))){
		
		console.log('prevent default!')
		e.preventDefault();
	}	
}
$('textarea')[0].onpaste = function(e){
	var get = e.clipboardData.getData('text');
	console.info('get: '+get);

	var set = e.clipboardData.setData('text/plain','呵呵呵呵');
	console.info('set: '+set);	
	//e.preventDefault();
}

HTML5约束验证API

required
type增加了几个类型
pattern可以正则验证
autofocus



高级技巧
bind就是函数科里化的
function a(x){
	return function(y){
		return x*y
	}
}

a(2)(3);//6

定时器的时间间隔表示何时将定时器的代码添加到队列 ，而不是何时执行。

setTimeout(function(){
	//...
	setTimeout(arguments.callee,500);
},500)


function myItv(func,itv){
	var a = 0;
	function itvf(){
		func(a++);
		setTimeout(itvf,itv);
	}
	var st = setTimeout(itvf,itv)
}

myItv(console.log,500)

函数防抖
var itv;
window.onresize = function(e){
	console.log('clearTimeout(itv)')
	clearTimeout(itv);
	itv = setTimeout(function(){
		console.log(itv);
		console.log(e.timeStamp)
	},2000)
}

函数节流
var flag=true;
window.onresize = function(e){
	if(!flag){
		return;
	}
	flag = false;
	itv = setTimeout(function(){
		console.log(e.timeStamp);
		flag=true;
	},2000)	
}

HTML5 脚本编程

文档内部传递消息
window.postMessage('666','*');

frame1.onmessage = (x) =>console.log(x);

原生拖放
拖动时，
元素发生的事件：
1.dragstart
2.drag
3.dragend
被移动到有效放置目标上边的时候
1.dragenter
2.dragover
3.dragleave或drop

dataTransfer对象(拖动事件的一个属性,用于向拖动元素目标传递字符串格式的数据)

draggable 可移动

媒体元素

错误处理与调试

chrome调试必备

1.try catch 语句
try {
	//do sth here.
}catch(err){
	//handle error;
}
finally{
	//无论如何都会被执行，即使前边有return，6666;
}

错误类型
Error 基本类 
EvalError 使用eval时异常抛出的错误
RangeError 数值超出范围
ReferenceError 找不到对象的时候
SyntaxError 语法错误
TypeError 类型错误 
URIError URI格式不正确

throw 操作符用于随时抛出自定义错误(遇到throw语句，代码立即停止)
throw 123;
throw true;
throw new TypeError('111')
throw new SyntaxError('222')
throw new ReferenceError(true);

自定义自己的错误类型

function myError(e){
	this.name = 'myError';
	this.message = e;
}
//myError.prototype = new Error();
myError = Object.create(Error.prototype);
throw new myError('fuck off')

assert();//断言函数,接受参数(条件，条件不满足时候显示错误);
function assert(condition,msg){
	if(!condition){
		throw new Error(msg);
	}
}

//跳过15章，18章，19章

20. JSON
JSON是JavaScript的严格子集,是一种数据格式
三种值：
1. 简单值（字符串，数值，布尔值和null）
2. 对象（有序键值对，值可以为是简单类型也能是复杂类型）
3. 数组
不支持undefined

JSON必须使用双引号,没有变量，没有分号,函数会被忽略，undefined值会被跳过

JSON对象
stringify()与parse()

var a = {
	name:'conan',
	age:12,
	likeBread:false,
	udf:undefined,
	func:function(){}
}

var jsonText = JSON.stringify(a);
//
{"name":"conan","age":12,"likeBread":false}

var aCopy = JSON.parse(jsonText);
//这种方式可以copy简单对象

序列化选项
//第二个参数可以接要过滤的属性,或者函数,或者null,空格缩进
JSON.stringify(obj,null,4)

toJSON()方法，自定义返回的JSON数据·

21.AJAX
var url ='https://baidu.com/';
var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function(){
	if(xhr.readyState==4&&(xhr.status>=200&&xhr.status<300||xhr.status ===304)){
		resolve(xhr.responseText);
	}
}
xhr.open('GET',url);
xhr.send(null);
xhr.getAllResponseHeaders();
HTTP头部信息
xhr.setRequestHeader('Cookie',cookie);
xhr.setRequestHeader('Host',host);
xhr.setRequestHeader('Referer',referer);
xhr.setRequestHeader('User-Agent',UA);
xhr.setRequestHeader('Origin','https://readhub.me');

获取头部信息
xhr.getAllResponseHeaders();

GET与POST

GET一般用于获取信息，字符串参数追加到URL末尾

POST常用于保存数据,数据作为请求主体,包含数据多，格式不限,消耗资源多一点

xhr.send(postContent);

进度事件
progress事件能够获取当前已经获取的数据占总共需要获取的数据百分比

跨域
jsonp
CORS
附加Origin头部，与服务器端设置的
Access-Control-Allow-Origin:scheme://hostname.xx:port/

其他跨域技术：

1.图像ping（一个网页可以从任何网页加载图像）
var img = new Image();
img.onload = function(e){
	console.log(e)
}
img.src = 'https://ss0.baidu.com/73F1bjeh1BF3odCf/it/u=3603538548,1886446234&fm=85&s=88892BD9CA20E6CC8425C4180300C0D3';

2.jsonp
回调函数和动态加载脚本返回的数据
function handleRes(res){
	console.log(`Your ip is: ${res.ip}`);
}
var scr = document.createElement('script');
scr.src = 'https://freegeoip.net/json/?callback=handleRes';
document.body.insertBefore(scr,document.body.lastChild);
scr.onload=function(){
	console.log('script loaded!')
}
scr.onerror=function(){
	console.log('script error!')
}
3.commet，SSE(暂时略过)
4.websocket(持久的，全双工，双向通讯)
http://
--->
ws://

var socket = new WebSocket('wss://echo.websocket.org');
socket.send('hello');
socket.onmessage = function(e){
	var data = e.data;
	console.log(e);
}
socket.onopen=function(){
	console.log('open succees! ')
}
socket.onerror=function(){
	console.log('error !')
}
socket.onclose=function(){
	console.log('closed !')
}

高级技巧！！
1.高级函数
安全类型的检测
原生构造函数的对象原型与作用域无关
Object.prototype.toString.call(value);
惰性载入(避免重复执行过多的分支语句)
a.返回的函数覆盖函数本身,下次调用的时候,直接上次的结果.
b.IIFE(立即执行函数,创建独立作用域,减少环境污染)
!(function(){}());

//polyfill
function bind(fn,context){
	return function(){
		return fn.apply(context,arguments);
	}
}
ES5 自带bind
函数柯里化
设置好部分参数的函数
function a(x){
	return function(y){
		return x*y;
	}
}
a(8)(5);

function curry(fn){
	var args = Array.prototype.slice.call(arguments,1);
	return function(){
		var innerArags = Array.prototype.slice.call(arguments);
		var finalArags = args.concat(innerArags);
		return fn.apply(null,finalArags);
	};
}
function add(a,b){
	return a+b;
}
var curriedAdd = curry(add,3);
curriedAdd(6);//9
ES5 的bind也实现了函数柯里化

数组分块技术(定时器实现一个简单的队列)
var arr = [1,2,3,4,5,6];
function process(e){
	console.log(e);
}
setTimeout(function(){
	var item = arr.shift();
	process(item);
	if(item){
	setTimeout(arguments.callee,800);
	}
},800)
//************另外一种写法(严格模式禁止arguments.callee)************//
var arr = [1,2,3,4,5,6];
function process(e){
	console.log(e);
}
var handler = function(){
	var item = arr.shift();
	process(item);
	if(item){
	setTimeout(handler,800);
	}

}
setTimeout(handler,800);

离线应用
1.判断是否离线
navigator.onLine;
window.online=function...
window.offline=function...

HTML5的应用缓存
appcache

描述文件，列出需要下载和缓存的资源
//main.appcache
CACHE MANIFEST
#Comment
file.js
file.css

<html manifest='offline/main.appcache' >

数据储存
1.cookie（数据需要编码encodeURIComponent）
客户端，用于存储会话信息的
限制：
域限制cookie数量
长度限制4095b以内

document.cookie 返回所有cookie的字符串
删除cookie的方法就是重新设置+失效时间变为过去
document.cookie=xxx+""+new Date(Date.now()-100000)+"; ";

web存储机制（5M或2.5M的限制）
localStorage（同一域名，同一协议，同一端口，数据保存到用户清除或JavaScript删除)

localStorage.setItem(flag,value);
localStorage.flag = value;
localStorage.getItem(flag);
localStorage.flag;//value
localStorage.clear();
localStorage.key(index);
localStorage.removeItem(flag);


sessionStorage储存于某个会话(直到浏览器关闭)
两者都 可以直接用属性设置，获取
sessionStorage.book = 'aaa';
sessionStorage.book;//aaa

indexedDB

var req,db;
req = indexedDB.open('test');
req.onerror = function(e){
	console.log(e);
}
req.onsuccess = function(e){
	db = e.target.result;
	console.log(db);
}

ES6 踏入征程

start now

#1
1.升入理解JavaScript闭包和原型
每个函数都有一个属性叫prototype,这个属性是一个对象(原型对象)，这个对象默认又有一个constructor属性指向这个函数的本身。
RegExp.prototype.constructor === RegExp;//true

所有通过new 函数生成的实例都能继承这个原型对象上边的属性
RegExp.prototype.sayHello=function(){
	console.log('hello');
}
var myRegExp = new RegExp();
myRegExp.sayHello();
这个实例有一个非标准的属性"__proto__"等于构造函数的原型对象
myRegExp.__proto__ === RegExp.prototype;//true

/*****************金句**************/
每个函数都有一个原型对象(prototype),
每个对象都有一个隐式属性(__proto__),指向创建该对象函数的prototype.
/*****************金句**************/

var a = {};
a.__proto__ === Object.prototype;true

Object.prototype.__proto__ ===null;//true

再来一遍.
每个函数都有一个原型对象(prototype),
每个对象都有一个隐式属性(__proto__).
那函数也是对象啊,那函数是不是也有隐式属性?
对!
函数的隐式属性指向的是构造函数的prototype对象,
所有函数，都是被Function创建的!

RegExp.__proto__===Function.prototype;//true
Object.__proto__===Function.prototype;//true

那Function对象本身的隐式属性呢?
自己的隐式属性等于自己的原型对象.
Function.__proto__ === Function.prototype;//true
同时Function原型对象的隐式属性不就等于构造函数(Object)的prototype吗
Function.prototype.__proto__===Object.prototype;//true
OJBK!

instanceof 左边是对象,右边是函数,判断为true的规则是:
左边的__proto__,右边的prototype,能同时找到一个对象则为true;

Object instanceof Function;//true
Function instanceof Function;//true
Function instanceof Object;//true

JavaScript继承，通过原型链完成.
访问一个对象的属性,现在自己本身找,如果没有继续往__proto__这条链上找.
for in 会循环出原型链上的属性.
obj.hasOwnPorperty(prop);//

所有对象的原型链都会找到Object.prototype,因此，所有的对象都会有Object.prototype拥有的方法.

执行上下文
JavaScript只有函数作用域和全局作用域
函数每被调用一次，都会产生一个新的执行上下文环境.
函数在定义的时候，就已经确定了函数内部自由变量的作用域.
函数this的取值，是在函数真正被调用执行的时候确定的,定义的时候确定不了,this的取值是执行上下文环境的一部分,每次调用函数,都会产生一个新的执行上下文环境.
分为4种情况:
1.构造函数
this指代构造函数生成的实例
function Student(name,age){
	this.name = name;
	this.age = age;
}
var a = new Student('conan',26);
a.name;//'conan'
a.age;//26
2.作为对象属性,并作为属性被调用的时候.
var obj = {
	a:12,
	b:'asd',
	c:function(){
		return this.a+this.b;
	}
}
obj.c();//'12asd'
var d = obj.c;
d();//window;
3.call,apply，this为传入绑定的值
继上例
d.call(obj);//'12asd'
4.全局或普通函数调用,
this===window;//true

作用域在函数创建时候就确定了，但是变量的值,确实在执行过程中确定的.

"静态作用域"，到《创建》这个函数的那个作用域中取值.
"执行环境是动态的"
作用域链,每执行一个函数就会创建一个作用域,在这个作用域中,如果需要某个变量,首先会在本作用域中找,如果找不到,就会在父级作用域中继续中，一次网上找，这就是作用域链.

闭包就是保留了执行上下文!

#2
同步、异步和事件循环

异步：
注册函数和回调函数
setTimeout(fn,200);
setTimeout就是注册函数,fn就是回调函数.
在200之后，将事件加入到队列,
异步过程的回调,一定不再当前这一轮事件循环中执行.

Promise状态：pending，filfilled，resolved，rejected
var promise = new Promise(function(resolve,reject){
	if(/*异步操作成功*/){
		resolve(value);
	}else{
		reject(value);
	}
})
promise.then(function(v){
	//handle succedd
},function(v){
	//handle failed
})
promise.prototype.catch()  是.then(null,function...)的别名
所以经常用的是：
promise
.then(function...)
.then(function...)
.catch(function...);
Promise.resolve
将现有对象转为Promise对象.
直接生成一个Promise对象
var p = new Promise.resolve();

console.log(1)
function myProm(resolve,reject){
	console.log(2)
	var rand = Math.floor(Math.random()*51+50);
	if(rand>75){
		setTimeout(resolve(rand),20000);
	}else{
		reject(rand);
	}
}
var p1 = new Promise(myProm);
p1.then(function(r){
	console.log(3)
	console.log(r)
}).catch(function(r){
	console.log(4)
	console.error(r);
})
console.log(5)
setTimeout(function(){console.log(6)},0)
Promise最大的好处是在处理执行异步的流程中，把执行代码和处理结果的代码，清晰的分离了。

12.重绘和重排
网页的生成过程，
构建DOM，
构建CSSDOM，
结合DOM和CSSDOM，生成一颗渲染树，
生成布局，
绘制布局，
重绘和重排都叫渲染!
重新生成布局叫重排reflow(一定重绘),
重新绘制叫重绘repaint
重绘和重排的DOM元素层级越高,成本就越高
table元素的重排和重回成本，要高于div元素

BFC(block formated context)块级格式上下文


13.flex布局
容器设置
display:flex(inline-flex);//
容器的属性：
flex-direction(row(default),row-reverse,column,column-reverse)
flex-wrap(nowrap(default),wrap,wrap-reverse)
flex-flow(row nowrap(default))

justify-content(flex-start(default),flex-end,center,space-between,space-around)
align-items(flex-start(default),fle-end,center,baseline,stretch)
align-content(flex-start(default),flex-end,center,space-between,space-around,stretch)

项目属性：
order
flex-grow(放大，默认为0)
flex-shrink(缩小，默认为1)
flex-basis(占据空间大小,默认auto)
flex
align-self

scss
@function px2rem($px) {
	$rem: 37.5rem;
	@return ($px / $rem) + rem;
}

//函数防抖
var timer;
window.onresize = (e)=>{
clearTimeout(timer);
timer = setTimeout(function(){
console.log("width "+document.body.clientWidth);
console.log("height "+document.body.clientHeight);
},1000)
}

//函数节流
var flag = false,itv;
window.onresize = function(){
	if(flag){
		return;
	}else{
		flag = true;
		itv = setTimeout(function(){
			console.log("clientHeight: "+document.body.clientHeight);
			console.log("clientWidth: "+document.body.clientWidth);
			flag = false;
		},2000)
	}
}

JavaScript严格模式
















































































































































































































































