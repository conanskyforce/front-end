JavaScript数据类型

字符串(转义字符反斜杠 \,es6增加多行字符串``,${var},)
数字(整数，浮点数，科学计数法，负数，NaN，Infinidy，0x554)
布尔(&&,||,!,>,<,==,===,!=,!==,)的结果
null(空)
undefined(申明了，但是未定义)
对象(数组，函数，对象(每个键都是字符串,in 判断属性在不在某个变量(或其原型,判断是否自身才有obj.hasOwnProperty(prop))))

x=0;
switch(x){
    case 1:alert('Monday!');
       break;
    case 2:alert('Tuesday!');
    default:alert('Noday!')
}

For/In 循环
var obj= {stu1:"conan",stu2:"steve",stu3:"kite"}

for(var x in obj){

console.log(x)
}

stu1
stu2
stu3

！！实际循环的是下标

JavaScript错误处理
try{
var asd = s;
throw "err defined by me."
}
catch(err){
alert(err)
}

JavaScript对象的属性必须是字符串,针对这种情况，es6新推出了Map,Set结构.
Map 键值对结构,具有极快的查找速度
var myMap = new Map();
var name = ['jack','pony','mason']
var age = [48,42,49];
myMap.set(name[0],age[0]);
myMap.set(name[1],age[1]);
myMap.set(name[2],age[2]);

myMap.has('jack') ;//true
myMap.get('jack') ;//48

Set 与 Map 类似，但是Set不能储存value，不能储存重复的key

var mySet = new Set();
mySet.add(1);
mySet.add('1');
mySet.add(1);
mySet.add(2);
mySet.add('ok');
mySet;

Array,Map,Set 都属于 `iterable` 类型
for of 

forEach(fucntion([element,value,value],[index,key,value],[arr,Map,Set]){
	//...
})

函数内部关键字
arguments(类数组,保存传入函数的所有参数)

es6  rest 参数(数组)
function myFunc(a,b,...rest)

变量提升
在函数内部，将所有申明的变量，提升到函数头部，
所以一定要在函数的头部，申明所有的变量

let 申明变量 只在作用域生效
比如：for，不会变量提升(const　也一样)
function a(){
var a='1';
console.log(a+b);
let b = '2';//ReferenceError: b is not defined

}
a();//

const 定义一个不变的量，必须赋予初始值

'use strict';//模式修复一些小错误，变量必须var申明，函数内部的this指向undefined。
*第二层函数内部，要先捕获外层this,外层var that = this;*

apply(第一个参数是要绑定this的对象，第二个是传入函数的参数(数组))
call(第一个参数是要绑定this的对象，第二个是传入函数的参数(依次传入))

func.apply(obj,[params...])

map, reduce

[1,2,3,4,5].map(String);//["1", "2", "3", "4", "5"]
[1,2,3,4,5].map(function(x){return (x).toString()});//["1", "2", "3", "4", "5"]
[1,2,3,4,5].map(function(x){
	return x.toString();
})
[1,2,4,5,4,5,8,9].filter(function(e,i,a){return a.indexOf(e)===i})

["1", "2", "3", "4", "5"].reduce(function(x,y){return x+y});//"12345";

创建一个匿名函数并立即执行的办法,直接写语法解析会报错
(function(x){
	return x*x;
}(5));

(function(x){
	return Math.pow(x,2)
})(9);

箭头函数(相当于匿名函数,简单，并且修复了this指向问题(词法作用域，指向外层调用者))
x => x*x;
等价于
function(x){
	return x*x;
}

generator 

function* foo(x){
	yield x*x;
	yield x*x*x;
	return x**x;
}
var r = foo(3);
r;
r.next();
r.next();
r.next();

for(let a of r){
	console.log(a)
}
//循环yield的结果

generator可以在执行中多次返回，看上去就像一个可以记住执行状态的函数，generator的大用处在针对异步代码

parseInt() parseFloat() 转换到number类型
String() 或者自带的toString() 转换到string类型
typeof 可判断出number string boolean function undefined,判断不了null,数组和一般对象
Array用Array.isArray(arr) 判断
null 用 ele===null 判断
判断是否是全局对象 typeof window.someEle==='undefined'
判断某个变量是否存在用 typeof ele ==='undefined';

Object.create(ob);//创建一个基于ob原型的新对象 
var a = [];
a.__proto__ === Array.prototype;//true
原型链
a-->Array.prototype-->Object.prototyp-->null

alert.__proto__===Object.getPrototypeOf(alert);//true
Object.getPrototypeOf(alert)===Function.prototype;//true

function Structfunc(){
	this.x = 1;
	this.y = 2;
}

var x = new Structfunc();
x.x;//1
x.y;//2
原型链
x-->Structfunc.prototype-->Object.prototype-->null;
x同时获得一个constructor属性
x.constructor === Structfunc.prototype.constructor;//true
x.constructor === Structfunc;//true
x instanceof Structfunc;
x instanceof Object;

继承
function inherits(Child,Parent){
	var F = function(){};
	F.prototype = Parent.prototype;
	Child.prototype = new F();
	Child.prototype.constructor = Child;
}

es6 class
class Student{
	constructor(name){
	this.name = name;
	}
	otherfunc(){
	console.log(this.name)
	}
}
var x = new Student('666');
x.otherfunc();//666

class ExtendsStudent extends Student{
	constructor(name,grade){
	super(name);
	this.grade = grade;
	}
	myGrade(){
		return function(){console.log(this.grade)};
	}
}
var extStu = new ExtendsStudent('conan',99);
extStu.myGrade();//99



onsubmit ="return false"

onchange (元素被改变，然后失去焦点的时候触发)

<form action="xxx.xx" method="POST" onsubmit="return false">
<input type="text" name="text1">

<input type="submit" value="submit">
</form>



typeof new Boolean('asd')//构造函数 objet
typeof Boolean('asd')//转换函数 boolean

0，-0，null，''，false，undefined,NaN ————对象为false


Date()返回一个字符串
new Date()返回一个Date对象,值与Date()返回值一样

function getLocalTime(){
var d = new Date(),
    year = d.getFullYear(),
    month = d.getMonth(),
    date = d.getDate(),
    day = d.getDay(),
    hour = d.getHours(),
    min = d.getMinutes(),
    sec = d.getSeconds(),
    localTime = year+"年"+(month-0+1)+"月"+date+"日 " +hour+":"+min+":"+sec
console.log(localTime)
}
getLocalTime()

//获取UTC时间
function getUTCTime(){
var d = new Date(),
    year = d.getFullYear(),
    month = d.getMonth(),
    date = d.getUTCDate(),
    day = d.getUTCDay(),
    hour = d.getUTCHours(),
    min = d.getUTCMinutes(),
    sec = d.getUTCSeconds(),
    localTime = year+"年"+(month-0+1)+"月"+date+"日 " +hour+":"+min+":"+sec
console.log(localTime)
}
getUTCTime()


Math.random() ———>[0,1)

[97，130]

Math.floor(Math.random()*34)+97


随机获取[min,max]范围内的整数
Math.floor(Math.random()*(max-min+1)+mimn);


String
var s = "qwertyuiop";

s.charAt(0)//q
s.charCodeAt(0)//113
String.fromCharCode(113)//q

match全局匹配返回的是匹配到的子串
match非全局匹配，匹配到的是数组，第一个元素时匹配到的子串，index是文字，input是匹配元素

正则表达式

RegExp自己的方法

test()//返回true或false
exec()//返回匹配到的信息，匹配不到返回null

字符串的方法
search()//返回出现位置
match()//返回数组，已说明过
replace()
split()


encodeURI处理整个URI
encodeURIComponent处理query那部分字符串

decodeURIComponent能解码所有哦！

浏览器窗口的宽高(去除菜单栏，工具栏，边框的宽高)
window.innerHeight
window.innerWidth

document.documentElement.clientHeight
document.documentElement.clientWidth

服务端设置cookie，使用httpOnly，使得cookie只能通过浏览器获得

innerText不返回隐藏的原物文本
textContent返回所有文本
cssText css样式文本

提交表单
form 元素有一个submit方法
form本身的onsubmit事件
name属性会被提交给后台

<form action="#" enctype="multipart/form-data">
<input type="file" name="fileUpload"	/>

</form>

var file = document.getElementsByName('fileUpload')[0];

file.files[0].name;//名字
file.files[0].size;//大小字节
file.files[0].type;//类型

var reader = new FileReader();//读取文件接口
reader.onload = function(e){
	var data = e.target.result;
	preview.style.backgroundImage = 'url('+data+')';
}
reader.readAsDataURL(file);

AJAX

var request = new XMLHttpRequest();
request.onreadystatechange = function (){
	if(request.readyState == 4){
		if(request.status === 200){
			return success(request.responseText);
		}else{
			return fail(request.status);
		}
	}
}
request.open('GET','apiUrl');
request.send();

var req = new XMLHttpRequest()||new ActiveXObject('Microsoft.XMLHTTP');
req.onreadystatechange = function (e) {
	if(req.readyState ===4 &&req.status ===200){
		console.log(e);
		console.log(req);
		console.log("req.responseText: "+req.responseText);
	}
}
req.open('GET','https://httpbin.org/ip',true);//默认用异步
req.send();

跨域
JSONP
函数调用的形式返回，预先在页面中准备好回调函数
数据回来就相当于直接执行回调函数

CORS
Access-Control-Allow-Origin 包含本域就能够给跨域请求成功

Promise

new Promise(func)
.then(function(res){
	//do sth if success;
})
.catch(function(res){
	//do sth if failed;
})

jQuery
$(':contains(不错)')
$('someSelector').css('xxx',{'xx':'xx','xx':'xx'})
$('someSelector').addClass('xxx');
$('someSelector').hasClass('xxx');
$('someSelector').removeClass('xxx');
$('someSelector').show(time);
$('someSelector').hide(time);
$('someSelector').attr('id,name,data...')
$('someSelector').removeAttr('id,name,data...')
$('someSelector').is(':chcked');
$('someSelector').is(':selected');
$('someSelector').prop('chcked');
$('someSelector').val();
$('someSelector').append();
$('someSelector').prepend();
$('someSelector').before();
$('someSelector').after();
$('someSelector').remove();

change --> input, select, textarea 内容改变时触发
submit --> form 提交时触发

$(document).read(function(){
	//...
})
$(function(){
	//...
})

$('someSel').off();//移除所有事件
.trigger() ;//触发事件
.serialize();//序列化表单

async 和 defer
普通：加载并执行完毕再执行之后代码
async(异步)：加载执行的同时还加载之后文档，一定在load事件之前执行，但可能在DOMContentLoaded事件之前或之后
defer：脚本的执行要等到文档加载完成之后，在DOMContentLoaded触发之前完成

var a;
//var b 并没有申明

typeof a ;//undefined
typeof b ;//undefined

undefined派生自null

null == undefined;//true

var log = window.console.log;
var count = 0;
window.console.log = function(){
	console.log(count++);
	return log.apply(null,arguments);
}
console.log(1)

几乎所有值都有toString方法(null,undefined没有)


120..toString(8);//170
parseInt(170,8);//120

位操作符
1.按位非(~)(操作数的负值-1)

var num1 = 25;
var num2 = ~num1;//-26(反码[负值]+1===-25)

2.按位与
var res = 25&3;//1

3.按位或
var res = 25|3;//27

4.按位亦或
var res = 25^3;//26

5.左移(所有位左移,右边补0)
var num1 = 2;
var num2 = num1<<5;//64

6.右移(所有位右移,左边补0)
var num1 = 64;
var num2 = num1>>5;//2


function rest(...arr){
	console.log(arr);//[1,2,3,4]
	console.log(arguments);//[1, 2, 3, 4, callee: (...), Symbol(Symbol.iterator): ƒ]
}
rest(1,2,3,4)

P87 第四章 变量、作用域与内存

基本类型（按值访问）：undefined，null，boolean，string，number
引用类型（保存在内存中的对象）：对象
对象的一般复制只复制的指针，指向相同的对象

作用域链（作用域嵌套，局部变量只能作用域访问，下层能访问上层变量）

BOM和DOM对象采用计数垃圾回收机制，

不使用的时候，手工断开其余原生JavaScript对象的联系
myObject.element = null;
element.someObject = null;

复制为null表示解除引用;

数组
[] instanceof Array;
Array.isArray();

push() 插入任意项，返回总数组的长度
pop() 删除最后一项，返回这个值

push() ++ pop() 栈(后进先出)

push() ++ shift() 队列(先进先出)

reverse() 反转
sort() 调用toString()方法，转换为字符串再比较
两者返回的都是排序后的数组

[1,2,5].concat(1,5,7,[1,57,[2]]);//
[1, 2, 5, 1, 5, 7, 1, 57, Array(1)]

如果a,b中有负数,等价于数组长度+该数
slice(a,b)

splice(startPos,howMuch,addArr)

indexOf();//从开头找
lastIndexOf();//从末尾找

迭代方法
every()
some()
filter()
forEach()
map()
reduce()

Date.parse('12/3/2017');//返回某一日期距1970年的毫秒数
new Date('12/3/2017')
Date.UTC(2017,12,12,23,59,59);

Date.now();//当前时间毫秒数
+new Date();

RegExp
元字符必须转义(在正则表达式中有用途)
( [ { \ ^ $ | ) ? * + . ] }

正则表达式的方法：
exec();//匹配到了返回数组,没匹配到返回null
test();//匹配到了返回true,反之返回false


/[ab]((c)i)$/.exec('aci');
["aci", "ci", "c", index: 0, input: "aci"]
RegExp.$1;第1个捕获组
RegExp.$2;第2个捕获组
RegExp.$3;第3个捕获组
RegExp.$4;第4个捕获组
...

函数申明会被提升，表达式不会
alert(sum(1,2))
function sum(a,b){
	return a+b;
}
//没问题

alert(sum(3,4))
var sum = function(x,y){
	return x+y;
}
//报错

比较对象数组的属性，进行排序
function compareProperty(prop){
	return function(obj1,obj2){
		var value1 = obj1[prop];
		var value2 = obj2[prop];
		if(value1 <value2){
			return -1;
		}else if(value1>value2){
			return 1;
		}else{
			return 0;
		}
	}
}
var data = [{name:'adsd',age:56},{name:'lkuj',age:26},{name:'kuhy',age:86}];

data.sort(compareProperty('age'));


arguments.callee指代当前函数
arguments.callee.caller指向调用它的函数
严格模式下两者都不能用(禁止窥探函数内部)

每个函数都有length，prototype属性
length表示期望得到的参数个数
prototype则是实例的原型对象，各种方法都保存在这个原型之下
不可枚举，for-in无法发现
每个函数都包含apply,call方法
牛逼在于能够扩充函数运行的作用域

bind();//创建一个函数的实例，this值被绑定到传给bind函数的值

var color = 'red';
var o = {color:'blue'};
function showColor(){
	console.log(this.color);
}
showColor();//red
showColor.call(o);//blue
showColor.apply(o);//blue

var newShowColor = showColor.bind(o);
newShowColor();//blue

P137 基本包装类型

String
.slice(start,end);//负数+长度
.substring(start,end);//负数变0
.substr(start,howMany);//第一个辅助+长度，第二个变0

字符串的正则方法
.match()
.search()
.replace()
.split()

可以对整个URI使用encodeURI(),而只能对附加在URI后边的字符串使用encodeURIComponent()

取得global对象

;(function(){
	return this;
}());

返回a-b之间的整数

function selectNumber(smallValue,bigValue){
	var choices = bigValue - smallValue + 1;
	return Math.floor(Math.random() * choices + smallValue)
}
selectNumber(10,85)

面向对象(OOP)

var person = {};
Object.defineProperty(person,'name',{
	configurable:false,//不可配置，不可删除,变了true之后，只能修稿writable的值
	writable:false,//不可重赋值
	enumerable:false,//不可遍历
	value:'conan'//值
})

var person = {
	name:'conan',
	_age:26
}

[[getter]] 和 [[setter]]

Object.defineProperty(person,'age',{
	get:function(){
		return this._age;
	},
	set:function(newV){
		this._age = newV;
		this.name+=newV;
	}
})

Object.defineProperties(person,{
	'age':{
		configurable:false,
		writable:false,
		enumerable:false,
		value:'26'
	},
	'name':{
		configurable:true,
		writable:false,
		enumerable:true,
		value:"conan"
	}
})


Object.getOwnPropertyDescriptor(person,'name');

.isPrototypeOf();
Object.getPrototypeOf();

in 也返回在原型中的属性
hasOwnProperty() 只返回该对象中的属性
!hasOwnProperty(prop)&&(prop in obj) 只存在于原型中

for in 也返回原型中[可枚举]的属性
Object.keys(obj);//返回原型中所有可枚举的属性

Object.getOwnPropertyNames(obj);//返回原型，以及原型链上的属性(不管可枚举还是不可枚举)

function Person(){
	
}
//切记重写原型对象不要在创建实例之后
Person.prototype = {
	name:'x',
	age:22,
	doSth:function(){
		this.age++;
	},
	sing:function(){
		console.log(this.name)
	}
}

Object.defineProperty(Person.prototype,'constructor',{
	enumerable:false,
	value:Person
})
var a = new Person();
var b = new Person();

String.prototype.startsWith = function(txt){
	return this.indexOf(txt) ===0;
}

组合使用构造函数模式和原型模式
构造函数模式定义实例属性，原型模式定义方法和共享的属性。

function Person(name,age,job){
	this.name = name;
	this.age = age;
	this.job = job;
}

Person.prototype = {
	constructor:Person,
	sayJob:function(){
		alert(this.job)
	}
}
var p1 = new Person('conan',24,'CEO')
var p2 = new Person('steve',34,'COO')
p1.name;
p2.name;
p1.sayJob;
p2.sayJob;


var factorial  = (function f(x){
	if(x <= 1){
		return 1;
	}else{
		return x*f(x-1)
	}

});

factorial(10)

//后台的每个自信环境都有一个表示变量的对象——变量对象。全局环境的变量对象始终存在，而像compare()函数这样的局部环境的变量对象，则只存在函数自信的过程中存在。在船检compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[scope]]属性中。


//什么是闭包.
内部函数可以访问外部函数的变量和参数，即使是在外部函数被终结了之后。

//闭包只能取得包含函数中任何变量的最后一个值。

//模仿块级作用域,(只有函数作用域和全局作用域)
(function(){
	//...
})();

<<<<<<< HEAD
DOM
=======
>>>>>>> a79f552e40fdb22cf3b24a97ddca65bbd3e2fc75
节点类型
1 元素节点
2 属性节点
3 文本节点
9 文档节点

nodeType
nodeName是元素的标签名

每个节点都有childNodes属性保存所有子节点对象
x.childNodes[0]<==>x.childNodes.item(0);

var arrayOfNode = Array.prototype.slice.call(someNode.childNodes,0);

parentNode 父节点
firstChild
lastChild
previousSibling
nextSibling
ownerDocument 整个文档的文档节点
someNode.hasChildNodes()
操作节点最常用的方法就是
appendChild()

parentNode.insertBefore(newNode,null);//插入最后
parentNode.insertBefore(newNode,parentNode.firstChild);//插入最前
parentNode.insertBefore(newNode,parentNode.lastChild);//插入最后一个子节点前边

parentNode.replaceChild(xx,xx);
parentNode.removeChild(someNode);

document.documentElement --> html 元素
document.body --> body 元素

ele.id;
ele.name;
ele.title;
ele.cssText;
ele.className;
ele.classList;

特性(一般直接用节点元素的属性，而不是用这些方法，这些方法用于自定义属性)
ele.getAttribute('class');
ele.setAttribute('class','xxx');
ele.removeAttribute('class');

attributes属性(动态属性集合)

document.documentElement.attributes[0].nodeName;
document.documentElement.attributes[1].nodeValue;










